How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    By ignoring the text that is identical between the two files one can focus on the differences directly and thus save time and effort.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    It will help you keep track of your changes and give you a way to restore working versions if you make a mistake, like an undo button.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Pros: Logical points to save with documentation of changes.
    Cons: No automatic protection which may cause losses

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

  Git is version control for program code which is often made up of many different files that will 
not work interdependantly of each other. Whereas, documents can stand alone.
 

How can you use the commands git log and git diff to view the history of files?

    git log to see the log of changes with commit ID and notes
    git diff <1st ID> <2nd ID> to see specific adds/deletions between versions

How might using version control make you more confident to make changes that
could break something?

    By knowing that you can undo your errors and restore to a point as needed.

Now that you have your workspace set up, what do you want to try using Git for?

    My coding projects for online classes and projects that I run from home.